{"version":3,"sources":["simulation/workerEntry.js"],"names":["code","reply","payload","self","postMessage","runCode","model","commands","mobId","robots","mobs","Robot","eval","command","addEventListener","e","req","data","type","mob","dir","tx","ty","rot"],"mappings":";;;;;;;;;;;AA6DmC,aA7DnC,IAAA,OAAA,uBAAA,QAAA,YA6DmC,SAAA,uBAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,gBAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,kBAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,aAAA,EAAA,EAAA,GAAA,OAAA,GAAA,kBAAA,EAAA,UAAA,GAAA,GAAA,kBAAA,EAAA,GAAA,EA3DnC,IAAIA,KAAO,GAkBX,SAASC,MAAMC,GAEbC,KAAKC,YAAYF,GAGnB,SAASG,QAAQC,OACTC,IAAAA,SAAW,GAKZ,IAAA,IAAMC,SADXL,KAAKM,OAAS,GACMH,MAAMI,KACxBP,KAAKM,OAAQD,OAAU,IAAIG,MAAML,MAAMI,KAAMF,QAK1C,IAAA,IAAMA,UAFXI,KAAKZ,MAEeM,MAAMI,KACxBH,SAAUC,QAAUL,KAAKM,OAAQD,QAAQK,QAG3CZ,MAAMM,UArCRJ,KAAKW,iBAAiB,UAAW,SAACC,GAC1BC,IAAAA,EAAMD,EAAEE,KAEG,SAAbD,EAAIE,KAKS,SAAbF,EAAIE,KAKRjB,MAAM,CAAsBe,mBAAAA,IAJ1BX,QAAQW,EAAIV,OALZN,KAAOgB,EAAIhB,OAoCTW,IAAAA,MAiB6B,WAhBrBQ,SAAAA,EAAAA,GAAK,gBAAA,KAAA,GACVA,KAAAA,IAAMA,EAeoB,OAAA,aAAA,EAAA,CAAA,CAAA,IAAA,OAb5BC,MAAAA,SAAAA,IACU,IAATA,EACGP,KAAAA,QAAU,OAEA,IAARO,IACFP,KAAAA,QAAU,WAQc,CAAA,IAAA,cALnB,MAAA,WACPA,KAAAA,QAAU,YAIgB,CAAA,IAAA,IAFzB,IAAA,WAAS,OAAA,KAAKM,IAAIE,KAEO,CAAA,IAAA,IADzB,IAAA,WAAS,OAAA,KAAKF,IAAIG,KACO,CAAA,IAAA,MAAvB,IAAA,WAAS,OAAA,KAAKH,IAAII,QAAK,EAAA","file":"workerEntry.1cda96ce.js","sourceRoot":"..\\src","sourcesContent":["import Model from '~/model'\r\n\r\nlet code = ''\r\n\r\nself.addEventListener('message', (e) => {\r\n  const req = e.data\r\n\r\n  if (req.type === 'code') {\r\n    code = req.code\r\n    return\r\n  }\r\n\r\n  if (req.type === 'step') {\r\n    runCode(req.model)\r\n    return\r\n  }\r\n\r\n  reply({ 'echo from worker': req })\r\n})\r\n\r\nfunction reply(payload) {\r\n  // @ts-ignore - DedicatedWorkerGlobalScope.postMessage does not require an origin; self is not a Window\r\n  self.postMessage(payload)\r\n}\r\n\r\nfunction runCode(model) {\r\n  const commands = {}\r\n  // for (const mobId in model.mobs) {\r\n  //   commands[ mobId ] = 'forward'\r\n  // }\r\n  self.robots = {}\r\n  for (const mobId in model.mobs) {\r\n    self.robots[ mobId ] = new Robot(model.mobs[ mobId ])\r\n  }\r\n\r\n  eval(code)\r\n\r\n  for (const mobId in model.mobs) {\r\n    commands[ mobId ] = self.robots[ mobId ].command\r\n  }\r\n\r\n  reply(commands)\r\n}\r\n\r\nclass Robot {\r\n  constructor(mob) {\r\n    this.mob = mob\r\n  }\r\n  turn(dir) {\r\n    if (dir === -1) {\r\n      this.command = 'left'\r\n    }\r\n    else if (dir === 1) {\r\n      this.command = 'right'\r\n    }\r\n  }\r\n  moveForward() {\r\n    this.command = 'forward'\r\n  }\r\n  get x() { return this.mob.tx }\r\n  get y() { return this.mob.ty }\r\n  get rot() { return this.mob.rot }\r\n}\r\n"]}